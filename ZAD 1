#include <stdlib.h>
#include <stdio.h>
#include "header.h"

STUDENT* createSLLList(void){
    STUDENT* headnode = (STUDENT*)calloc(1,sizeof(STUDENT));
    if(headnode == NULL){
        return NULL;
    } else {
        inputNodeData(headnode);
        headnode->nextNode = NULL;
    }
    return headnode;
}

STUDENT* insertNewNodeSLLList(STUDENT* headnode){
    STUDENT* newheadNode = (STUDENT*)calloc(1,sizeof(STUDENT));
    if(newheadNode == NULL){
        return NULL;
    } else {
        inputNodeData(newheadNode);
        newheadNode->nextNode = headnode;
    }
    return newheadNode;
}

void inputNodeData(STUDENT* headnode){
    headnode->ime = (char*)calloc(30,sizeof(char));
    headnode->prezime = (char*)calloc(30,sizeof(char));
    scanf("%d", &headnode->id);
    scanf("%s", headnode->ime);
    scanf("%s", headnode->prezime);
    scanf("%f", &headnode->prosjek);
}

void traverseSLLList(STUDENT* traverseNode){
    if(traverseNode == NULL){
        exit(EXIT_FAILURE);
    }
    while(traverseNode != NULL){
        printf("%d %s %s %.2f\n", traverseNode->id, traverseNode->ime, traverseNode->prezime, traverseNode->prosjek);
        traverseNode = traverseNode->nextNode;
    }
}

float prosjekSvih(STUDENT* headnode){
    float ukupanProsjek = 0;
    int brojac = 0;

    while(headnode){
        brojac++;
        ukupanProsjek += headnode->prosjek;
        headnode = headnode->nextNode;
    }
    return ukupanProsjek/brojac;
}

STUDENT* searchSLLList(STUDENT* headnode, int x){
    while(headnode){
        if(headnode->id == x){
            return headnode;
        }
        headnode = headnode->nextNode;
    }
    return NULL;
}

void deleteNodeSLLList(STUDENT** headnode, STUDENT* targetNode){
    if(targetNode == NULL){
        printf("Ne postoji cvor za brisanje %p\n", targetNode);
        return;
    }
    if(*headnode == targetNode){
        *headnode = (*headnode)->nextNode;
        free(targetNode->ime);
        free(targetNode->prezime);
        free(targetNode);
    } else {
        STUDENT* traverseNode = *headnode;
        while(traverseNode->nextNode){
            if(traverseNode->nextNode == targetNode){
                traverseNode->nextNode = targetNode->nextNode;
                free(targetNode->ime);
                free(targetNode->prezime);
                free(targetNode);
                break;
            }
            traverseNode = traverseNode->nextNode;
        }
    }
}

STUDENT* deleteWholeSLLList(STUDENT* traverseNode){
    STUDENT* deleteNode = NULL;
    while(traverseNode != NULL){
        deleteNode = traverseNode;
        traverseNode = traverseNode->nextNode;
        free(deleteNode->ime);
        free(deleteNode->prezime);
        free(deleteNode);
    }
    return NULL;
}
